// Code generated by entc, DO NOT EDIT.

package ent

import (
	"calcio/ent/game"
	"calcio/ent/participation"
	"calcio/ent/team"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Participation is the model entity for the Participation schema.
type Participation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Goals holds the value of the "goals" field.
	Goals int `json:"goals,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ParticipationQuery when eager-loading is set.
	Edges              ParticipationEdges `json:"edges"`
	participation_game *uuid.UUID
	participation_team *uuid.UUID
}

// ParticipationEdges holds the relations/edges for other nodes in the graph.
type ParticipationEdges struct {
	// Game holds the value of the game edge.
	Game *Game `json:"game,omitempty"`
	// Team holds the value of the team edge.
	Team *Team `json:"team,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// GameOrErr returns the Game value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ParticipationEdges) GameOrErr() (*Game, error) {
	if e.loadedTypes[0] {
		if e.Game == nil {
			// The edge game was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: game.Label}
		}
		return e.Game, nil
	}
	return nil, &NotLoadedError{edge: "game"}
}

// TeamOrErr returns the Team value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ParticipationEdges) TeamOrErr() (*Team, error) {
	if e.loadedTypes[1] {
		if e.Team == nil {
			// The edge team was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: team.Label}
		}
		return e.Team, nil
	}
	return nil, &NotLoadedError{edge: "team"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Participation) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case participation.FieldID, participation.FieldGoals:
			values[i] = new(sql.NullInt64)
		case participation.ForeignKeys[0]: // participation_game
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case participation.ForeignKeys[1]: // participation_team
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Participation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Participation fields.
func (pa *Participation) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case participation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pa.ID = int(value.Int64)
		case participation.FieldGoals:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field goals", values[i])
			} else if value.Valid {
				pa.Goals = int(value.Int64)
			}
		case participation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field participation_game", values[i])
			} else if value.Valid {
				pa.participation_game = new(uuid.UUID)
				*pa.participation_game = *value.S.(*uuid.UUID)
			}
		case participation.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field participation_team", values[i])
			} else if value.Valid {
				pa.participation_team = new(uuid.UUID)
				*pa.participation_team = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryGame queries the "game" edge of the Participation entity.
func (pa *Participation) QueryGame() *GameQuery {
	return (&ParticipationClient{config: pa.config}).QueryGame(pa)
}

// QueryTeam queries the "team" edge of the Participation entity.
func (pa *Participation) QueryTeam() *TeamQuery {
	return (&ParticipationClient{config: pa.config}).QueryTeam(pa)
}

// Update returns a builder for updating this Participation.
// Note that you need to call Participation.Unwrap() before calling this method if this Participation
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Participation) Update() *ParticipationUpdateOne {
	return (&ParticipationClient{config: pa.config}).UpdateOne(pa)
}

// Unwrap unwraps the Participation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Participation) Unwrap() *Participation {
	tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Participation is not a transactional entity")
	}
	pa.config.driver = tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Participation) String() string {
	var builder strings.Builder
	builder.WriteString("Participation(")
	builder.WriteString(fmt.Sprintf("id=%v", pa.ID))
	builder.WriteString(", goals=")
	builder.WriteString(fmt.Sprintf("%v", pa.Goals))
	builder.WriteByte(')')
	return builder.String()
}

// Participations is a parsable slice of Participation.
type Participations []*Participation

func (pa Participations) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}
