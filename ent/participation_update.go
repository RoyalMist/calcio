// Code generated by entc, DO NOT EDIT.

package ent

import (
	"calcio/ent/game"
	"calcio/ent/participation"
	"calcio/ent/predicate"
	"calcio/ent/team"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ParticipationUpdate is the builder for updating Participation entities.
type ParticipationUpdate struct {
	config
	hooks    []Hook
	mutation *ParticipationMutation
}

// Where appends a list predicates to the ParticipationUpdate builder.
func (pu *ParticipationUpdate) Where(ps ...predicate.Participation) *ParticipationUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetGoals sets the "goals" field.
func (pu *ParticipationUpdate) SetGoals(i int) *ParticipationUpdate {
	pu.mutation.ResetGoals()
	pu.mutation.SetGoals(i)
	return pu
}

// SetNillableGoals sets the "goals" field if the given value is not nil.
func (pu *ParticipationUpdate) SetNillableGoals(i *int) *ParticipationUpdate {
	if i != nil {
		pu.SetGoals(*i)
	}
	return pu
}

// AddGoals adds i to the "goals" field.
func (pu *ParticipationUpdate) AddGoals(i int) *ParticipationUpdate {
	pu.mutation.AddGoals(i)
	return pu
}

// SetGameID sets the "game" edge to the Game entity by ID.
func (pu *ParticipationUpdate) SetGameID(id uuid.UUID) *ParticipationUpdate {
	pu.mutation.SetGameID(id)
	return pu
}

// SetGame sets the "game" edge to the Game entity.
func (pu *ParticipationUpdate) SetGame(g *Game) *ParticipationUpdate {
	return pu.SetGameID(g.ID)
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (pu *ParticipationUpdate) SetTeamID(id uuid.UUID) *ParticipationUpdate {
	pu.mutation.SetTeamID(id)
	return pu
}

// SetTeam sets the "team" edge to the Team entity.
func (pu *ParticipationUpdate) SetTeam(t *Team) *ParticipationUpdate {
	return pu.SetTeamID(t.ID)
}

// Mutation returns the ParticipationMutation object of the builder.
func (pu *ParticipationUpdate) Mutation() *ParticipationMutation {
	return pu.mutation
}

// ClearGame clears the "game" edge to the Game entity.
func (pu *ParticipationUpdate) ClearGame() *ParticipationUpdate {
	pu.mutation.ClearGame()
	return pu
}

// ClearTeam clears the "team" edge to the Team entity.
func (pu *ParticipationUpdate) ClearTeam() *ParticipationUpdate {
	pu.mutation.ClearTeam()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ParticipationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ParticipationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ParticipationUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ParticipationUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ParticipationUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ParticipationUpdate) check() error {
	if v, ok := pu.mutation.Goals(); ok {
		if err := participation.GoalsValidator(v); err != nil {
			return &ValidationError{Name: "goals", err: fmt.Errorf("ent: validator failed for field \"goals\": %w", err)}
		}
	}
	if _, ok := pu.mutation.GameID(); pu.mutation.GameCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"game\"")
	}
	if _, ok := pu.mutation.TeamID(); pu.mutation.TeamCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"team\"")
	}
	return nil
}

func (pu *ParticipationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   participation.Table,
			Columns: participation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: participation.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Goals(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: participation.FieldGoals,
		})
	}
	if value, ok := pu.mutation.AddedGoals(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: participation.FieldGoals,
		})
	}
	if pu.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   participation.GameTable,
			Columns: []string{participation.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: game.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   participation.GameTable,
			Columns: []string{participation.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: game.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   participation.TeamTable,
			Columns: []string{participation.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: team.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   participation.TeamTable,
			Columns: []string{participation.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{participation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ParticipationUpdateOne is the builder for updating a single Participation entity.
type ParticipationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ParticipationMutation
}

// SetGoals sets the "goals" field.
func (puo *ParticipationUpdateOne) SetGoals(i int) *ParticipationUpdateOne {
	puo.mutation.ResetGoals()
	puo.mutation.SetGoals(i)
	return puo
}

// SetNillableGoals sets the "goals" field if the given value is not nil.
func (puo *ParticipationUpdateOne) SetNillableGoals(i *int) *ParticipationUpdateOne {
	if i != nil {
		puo.SetGoals(*i)
	}
	return puo
}

// AddGoals adds i to the "goals" field.
func (puo *ParticipationUpdateOne) AddGoals(i int) *ParticipationUpdateOne {
	puo.mutation.AddGoals(i)
	return puo
}

// SetGameID sets the "game" edge to the Game entity by ID.
func (puo *ParticipationUpdateOne) SetGameID(id uuid.UUID) *ParticipationUpdateOne {
	puo.mutation.SetGameID(id)
	return puo
}

// SetGame sets the "game" edge to the Game entity.
func (puo *ParticipationUpdateOne) SetGame(g *Game) *ParticipationUpdateOne {
	return puo.SetGameID(g.ID)
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (puo *ParticipationUpdateOne) SetTeamID(id uuid.UUID) *ParticipationUpdateOne {
	puo.mutation.SetTeamID(id)
	return puo
}

// SetTeam sets the "team" edge to the Team entity.
func (puo *ParticipationUpdateOne) SetTeam(t *Team) *ParticipationUpdateOne {
	return puo.SetTeamID(t.ID)
}

// Mutation returns the ParticipationMutation object of the builder.
func (puo *ParticipationUpdateOne) Mutation() *ParticipationMutation {
	return puo.mutation
}

// ClearGame clears the "game" edge to the Game entity.
func (puo *ParticipationUpdateOne) ClearGame() *ParticipationUpdateOne {
	puo.mutation.ClearGame()
	return puo
}

// ClearTeam clears the "team" edge to the Team entity.
func (puo *ParticipationUpdateOne) ClearTeam() *ParticipationUpdateOne {
	puo.mutation.ClearTeam()
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ParticipationUpdateOne) Select(field string, fields ...string) *ParticipationUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Participation entity.
func (puo *ParticipationUpdateOne) Save(ctx context.Context) (*Participation, error) {
	var (
		err  error
		node *Participation
	)
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ParticipationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ParticipationUpdateOne) SaveX(ctx context.Context) *Participation {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ParticipationUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ParticipationUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ParticipationUpdateOne) check() error {
	if v, ok := puo.mutation.Goals(); ok {
		if err := participation.GoalsValidator(v); err != nil {
			return &ValidationError{Name: "goals", err: fmt.Errorf("ent: validator failed for field \"goals\": %w", err)}
		}
	}
	if _, ok := puo.mutation.GameID(); puo.mutation.GameCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"game\"")
	}
	if _, ok := puo.mutation.TeamID(); puo.mutation.TeamCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"team\"")
	}
	return nil
}

func (puo *ParticipationUpdateOne) sqlSave(ctx context.Context) (_node *Participation, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   participation.Table,
			Columns: participation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: participation.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Participation.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, participation.FieldID)
		for _, f := range fields {
			if !participation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != participation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Goals(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: participation.FieldGoals,
		})
	}
	if value, ok := puo.mutation.AddedGoals(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: participation.FieldGoals,
		})
	}
	if puo.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   participation.GameTable,
			Columns: []string{participation.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: game.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   participation.GameTable,
			Columns: []string{participation.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: game.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   participation.TeamTable,
			Columns: []string{participation.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: team.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   participation.TeamTable,
			Columns: []string{participation.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: team.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Participation{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{participation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
