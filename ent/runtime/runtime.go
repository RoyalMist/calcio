// Code generated by entc, DO NOT EDIT.

package runtime

import (
	"calcio/ent/game"
	"calcio/ent/participation"
	"calcio/ent/schema"
	"calcio/ent/team"
	"calcio/ent/user"
	"context"
	"time"

	"github.com/google/uuid"

	"entgo.io/ent"
	"entgo.io/ent/privacy"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	gameFields := schema.Game{}.Fields()
	_ = gameFields
	// gameDescDate is the schema descriptor for date field.
	gameDescDate := gameFields[1].Descriptor()
	// game.DefaultDate holds the default value on creation for the date field.
	game.DefaultDate = gameDescDate.Default.(func() time.Time)
	// gameDescID is the schema descriptor for id field.
	gameDescID := gameFields[0].Descriptor()
	// game.DefaultID holds the default value on creation for the id field.
	game.DefaultID = gameDescID.Default.(func() uuid.UUID)
	participationFields := schema.Participation{}.Fields()
	_ = participationFields
	// participationDescGoals is the schema descriptor for goals field.
	participationDescGoals := participationFields[0].Descriptor()
	// participation.DefaultGoals holds the default value on creation for the goals field.
	participation.DefaultGoals = participationDescGoals.Default.(int)
	// participation.GoalsValidator is a validator for the "goals" field. It is called by the builders before save.
	participation.GoalsValidator = participationDescGoals.Validators[0].(func(int) error)
	team.Policy = privacy.NewPolicies(schema.Team{})
	team.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := team.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	teamHooks := schema.Team{}.Hooks()

	team.Hooks[1] = teamHooks[0]
	teamFields := schema.Team{}.Fields()
	_ = teamFields
	// teamDescName is the schema descriptor for name field.
	teamDescName := teamFields[1].Descriptor()
	// team.NameValidator is a validator for the "name" field. It is called by the builders before save.
	team.NameValidator = teamDescName.Validators[0].(func(string) error)
	// teamDescID is the schema descriptor for id field.
	teamDescID := teamFields[0].Descriptor()
	// team.DefaultID holds the default value on creation for the id field.
	team.DefaultID = teamDescID.Default.(func() uuid.UUID)
	user.Policy = privacy.NewPolicies(schema.User{})
	user.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := user.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	userHooks := schema.User{}.Hooks()

	user.Hooks[1] = userHooks[0]
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[1].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = userDescName.Validators[0].(func(string) error)
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[2].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	// userDescAdmin is the schema descriptor for admin field.
	userDescAdmin := userFields[3].Descriptor()
	// user.DefaultAdmin holds the default value on creation for the admin field.
	user.DefaultAdmin = userDescAdmin.Default.(bool)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}

const (
	Version = "v0.9.1"                                          // Version of ent codegen.
	Sum     = "h1:IG8andyeD79GG24U8Q+1Y45hQXj6gY5evSBcva5gtBk=" // Sum of ent codegen.
)
